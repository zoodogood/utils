[[{"l":"Welcome","p":["terminal:","JavaScript"]}],[{"l":"CreateMessage","p":["function CreateMessage(MessagePayload): MessagePayload","Description: Takes and transform MessagePayload"]},{"l":"options"},{"l":"Example"},{"l":"Real example"}],[{"l":"CreateModal","p":["function CreateModal({title, customId, components}): {title, customId, components} implements Modal","Description: Use simplify components and transform through ModalBuilder."]},{"l":"options"},{"l":"Example"},{"l":"Real example"}],[{"l":"isEmptyEmbed","p":["function isEmptyEmbed(embed): boolean","Description: Returns true if all embed parameters that specify content are equal to the default value."]},{"l":"embed"},{"l":"Example"},{"l":"Real example"}],[{"l":"justSendMessage","p":["function justSendMessage(target, MessagePayload): Message","Description: Provide reactions and delete options for more control. Uses CreateMessage. Can reply for modal or edit target message"]},{"l":"options"},{"l":"Example"},{"l":"Real example"}],[{"l":"SimplifyComponents","p":["function SimplifyComponents(data: ArrayActionRow | ArrayComponent | Component): ActionRowComponent","Description: Replaces interactions with ActionRow with working with arrays. Or even narrows down to one object."]},{"l":"embed"},{"l":"Example"},{"l":"Real example"}],[{"l":"SimplifyComponents","p":["function SimplifyComponents(ButtonData): ActionRowComponent","Description: Note: Sugar for Simplify Components Allows you to Pass only personalized fields"]},{"l":"ButtonData"},{"l":"Example"},{"l":"Real example"}],[{"l":"getChildProcessUtils","p":["function omit(...params): output as {run: TRun, info: TInfo, _ npm: \"npm\" | \"npm.cmd\"}","Description: Collect utilities for solve tiny problems and spawn child processes"]},{"l":"params"},{"i":"run-info-_npm","l":"run, info, _npm"},{"l":"Example"},{"l":"Real example"},{"l":"Second example"}],[{"l":"BusyNumeric","p":["class BusyNumeric {}","Description: More optimal search of numbers satisfying the condition"]},{"l":"Legend","p":["BusyNumeric учитывает эти две особенности. Работает в среднем в два раза быстрее, если совмещать худший и лучший случаи","O(1)","O(n)","O(n²)","Брать случайный, пока не найдем","В общем весело Работает всего в несколько шагов:","Выбираем случайный сегмент, а в нем случайный элемент","Выбирать номер и проверять удовлетворяет ли он условиям.","Если соответствует условию, возвращаем элемент. Завершаем поиск","Иначе исключаем элемент путем раздвоения текущего сегмента так, чтобы элемент не оказался ни в одном сегменте общего списка","Касательно формулировки задачи. Есть реальный пример, где несколько ячеек заняты, а остальные свободны — змейка, генерируем еду везде, где ничего не находится. Там вариант с выбором случайной точки очень хорошо отрабатывает.","Классические способы поиска свободного отеля:","лучший случай","Отель, в котором девяносто девять номеров заняты и один — свободен;","Отель, в котором один номер занят и девяносто девять — свободны.","Отфильтровать номера, а после среди них выбрать случайный;","Повторяем","Почему подходить к случайному номеру не эффективно: проблема возникает в худшем случае. Когда свободен только один номер, в среднем мы пройдемся по каждому номеру по сто раз, прежде чем дойдем до свободного номера. Сложность алгоритма: O(n²). Просмотренные номера эффективно записываются и не проходят фильтр дважды, но количество операций проверки: записан ли он — не уменьшается","Почему фильтровать не эффективно: нам потребуется обойти весь отель и проверить каждый номер.","Представьте отель. По условиям задачи каждый номер может быть выбран с одинаковой вероятностью, но выбранный номер может быть занят и тогда продолжаем поиск.","Разделять на сегменты","Рассматриваем два случая:","Способ","Фильтровать всё","худший случай"]},{"l":"Performance measurement results","p":["Проводилось около тридцати запусков стратегий «фильтровать всё» и «разделять на сегменты» в худшем и лучшем сценариях: все элементы не удовлетворяют условию и все — удовлетворяют. Списки состояли из 10_000 элементов и выполняли работу по созданию массива из 1_000 элементов. Всего вышло четыре конфигурации по тридцать запусков. Разброс времени выполнения существенный, но соотношение оставалось стойким.","Как и ожидалось, производительность при пустом фильтре уступает: в среднем до трех раз (усредненно для двух сценариев) — преймущество алгоритма зависит от сложности производимой работы для каждого элемента. А также от процента удовлетворяющих элементов. От их количества результат не зависит. Что стало лично для меня неожиданностью — при значимом увеличении сложности работы: по созданию массивов до 10_000-го размера, — преймущество алгоритма преуменьшалось. Видимо относительно малый объем накладных расходов на работу алгоритма накапливался в условиях торможения Node.js процесса.","Производилась ещё контрольная серия запусков. В которых а) результат фильтра hard_operation был непредсказуем и зависел от случайности. Алгоритм проходил все элементы, а не останавливался на первом удовлетворяющем; б) без внешнего эффекта hard_operation: для 100_000 элементов разница достигает тысячи раз (~ 3мс:3000мс) — это для абсолютного фильтра-пустышки (команда создания большого массива сохранялась). Проверялось изменится ли соотношение. — Cлучайный возвращаемый результат фильтра не влияет на результат; аннулирование внешних эффектов позволило движку оптимизировать .filter и, в меньшей степени, BusyNumeric. Однако, этот пример является полностью синтетическим.","Итого, когда всё «лагает» и у вас наихудший случай, избегайте этого алгоритма как огня. Однако уже задаче создания массива из 20-ти элементов среднее время выполнения для обоих случаев выравнивается. Худший случай остается в пользу стратегии фильтра. Этот алгоритм ещё можно пробовать оптимизировать: а) использовав структуру бинарного дерева для так называемых диапазонов (набор занятых пространств на основе которых быстро вычисляются сегменты); б) избегая вставки диапазонов до того, как потребуется пересчитать сегмент. Например, рассматривая левую часть, нам не нужно пересчитывать правую. Сейчас эти оптимизации не применются, так как они значительно усложнят код. Если они потребуются независимо от языка программирования, оставьте issue (отчёт об аспекте чего-либо) к репозиторию проекта."]},{"i":"-perfomance-use-binary_search-instead-of-findlastindex","l":"% Perfomance: use binary_search instead of findLastIndex","p":["~ + 15% производительности на тестах без тяжелой работы и теми же 10_000 элементами"]},{"l":"Example"},{"l":"Real example"}],[{"l":"CustomCollector","p":["class CustomCollector {}","Unstable","Description:- None"]},{"i":"constructorcollectoroptions","l":"constructor(CollectorOptions)"},{"l":"CollectorOptions"},{"l":"Example"},{"l":"Real example"},{"l":"Methods"},{"i":"setcallbackany--any-void","l":"setCallback((any) = any): void","p":["Initializes a callback function. It will be use when the event passed the filter is called."]},{"i":"end-void","l":"end(): void","p":["Close event listeners"]}],[{"l":"DotNotatedInterface","p":["Unstable","Resolve key (path) in target; Return item or default value","Resolve key; Set or update item value","Resolve key; Check item;","Resolve key; Remove item","Resolve key to segments, returns target partial with last segment key"]}],[{"l":"Extended enumerations"},{"l":"Pattern","p":["Expanded enumerations, in this case, are full of data while retaining their strengths: obviousness, manageability. This concept is taken from the Rust language, of which enumerations are an important part"]},{"l":"Syntax","p":["In example: enum Result, using Result.Ok with props: custom data and static status message."]},{"l":"Create you own Enum"},{"l":"Import"},{"l":"Examples"}],[{"l":"getRandomElementFromArray","p":["function getRandomElementFromArray(array: TArray, {filter?, associatedWeights?}: IParams)T: T;","Description: Returns a random element of the array with the ability to determine the probability of each element relative to the others"]},{"l":"Example"},{"l":"Real example","p":["There are many events happening and we need to generate them according to the instantly changing context, with different probabilities for each one. The confusing \"event\" has been replaced by \"artifact\"."]},{"l":"getRandomElementIndexInWeights","p":["function getRandomElementIndexInWeights(weights: TWeights): number[];","Params:","Description: Returns the numeric index of the random element. The probability depends directly on the value of the element."]},{"i":"example-1","l":"Example"},{"i":"real-example-1","l":"Real example"}],[{"l":"getRandomNumberInRange","p":["function getRandomNumberInRange({min?, max, needRound?}: IParams): number;","Description: Returns the value between min and max (inclusive)"]},{"l":"Example"}],[{"l":"omit","p":["function omit(...params): output as object","Description: Creates copy of object without elements, that didn't pass a filter."]},{"l":"params"},{"l":"Example"},{"l":"Real example"}],[{"l":"rangeToArray","p":["function rangeToArray([number, number]): number[];","Description: Returns an array including all intermediate and extreme numbers"]},{"l":"Example"},{"l":"Real example"}],[{"l":"binary_search","p":["function binary_search(number, (number) = 0 | 0 | 0): number","Description: Helps you find a number that satisfies the search."]},{"l":"Example"},{"l":"Real example"}],[{"l":"BracketsParser","p":["class BracketsParser {}","Description:- Resolve groups from text"]},{"l":"Example"}],[{"l":"CliParser","p":["class CliParser {}","Description:- Capture groups and flags with values"]},{"l":"Example"},{"l":"Methods","p":["Replace patterns like regHello [world]/reg to [Group*n] and save group metadata to parsed.groups . You don't have to think about reading them. The capture.isBracketGroupStamp() and capture.toGroupElement() methods will do it for you.","See BracketsParser for understand how parse own patterns.","Insensitive registry util for capture simple text like --at=1, --at 1 or -t 1, (if some alias exists). In this example, capture.toString() will equal the value 1 because the expectValue parameter.","Used for capturing specific patterns from text. Syntactic sugar for text = text.replace(regex, (full) = (match = full)) and more"]}],[{"l":"ending","p":["function ending(...params): string","Description: Sets the suffix depending on the numerator."]},{"l":"params"},{"l":"options"},{"l":"Example"},{"l":"Real example"}],[{"l":"normalize_to_max_coefficient","p":["function normalize_to_max_coefficient(number[]): number[]","Description: Makes fractions integer, preserving the ratio between them as much as possible. However, converts the set to Number.MAX_SAFE_INTEGER."]},{"l":"Example"},{"l":"Real example"}],[{"l":"TextTableBuilder","p":["class TextTableBuilder {}","Description:- Generate a table row by row"]},{"l":"Example","p":["Min","Max","Sets the function to place each border symbol for the specified directions.","Adds a line, uses a function to draw each character.","Places a row containing the listed values in the table.","Uses the TextTableGenerator and returns a text representation of the table.","Adds lines based on content that supports the \\n character.","Allows you to create row and assign some cells with their own parameters to row."]}]]